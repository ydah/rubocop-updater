name: rubocop-updater
description: Update RuboCop and regenerate `.rubocop_todo.yml` to exclude all newly added offense cops and create Pull Request.
inputs:
  github_token:
    description: GitHub access token to run another workflows from new pull request.
    required: false
  label:
    description: Label to be given to the pull request.
    required: false
    default: ""
  update_target:
    description: RuboCop (or extension) to be updated.
    required: false
    default: rubocop
  conservative_update:
    description: Is conservative update?
    required: false
    default: "true"
  rubocop_options:
    description: RuboCop client command line options for --auto-gen-config.
    required: false
    default: ""
  another_gemfile:
    description: Gemfile to be updated at the same time
    required: false
    default: ""

runs:
  using: composite
  steps:
    - uses: actions/checkout@v3
    - name: Detect ruby version
      id: ruby-version
      run: echo "::set-output name=version::$(cat .ruby-version)"
      shell: bash
    - uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true
        ruby-version: ${{ steps.ruby-version.outputs.version }}
    - run: gem install --no-document gemfile_parser:0.1.0
      shell: bash
    - name: gemfile_parser groups
      id: groups
      run: |
        ignore_groups=$(gemfile_parser groups ${{ inputs.update_target }} --ignore --delimiter=: )
        echo "::set-output name=ignore_groups::${ignore_groups}"
      shell: bash
    - name: Preparations to be made before executing an action
      run: |
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git switch --create update-${{ inputs.update_target }}-${{ github.run_number }}
        bundle config unset deployment
        bundle install
      env:
        BUNDLE_WITHOUT: ${{ steps.groups.outputs.groups }}
      shell: bash
    - name: Regenerate `.rubocop_todo.yml` once at this point. (for easier to see the differences due to updates)
      continue-on-error: true
      run: |
        bundle exec rubocop --auto-gen-config ${{ inputs.rubocop_options }}
        git add -u
        git commit -m "rubocop --auto-gen-config ${{ inputs.rubocop_options }}"
      shell: bash
    - name: Update target RuboCop (extension) to be updated.
      run: |
        bundle update ${{ inputs.conservative_update == 'true' && '--conservative' || '' }} ${{ inputs.update_target }}
        git add -u
        git commit -m "bundle update ${{ inputs.conservative_update == 'true' && '--conservative' || '' }} ${{ inputs.update_target }}"
      shell: bash
    - name: Update target RuboCop (extension) to be updated for another Gemfile.
      if: ${{ inputs.another_gemfile }} != ""
      run: |
        export BUNDLE_GEMFILE="${{ inputs.another_gemfile }}"
        bundle update ${{ inputs.conservative_update == 'true' && '--conservative' || '' }} ${{ inputs.update_target }}
        git add -u
        git commit -m "bundle update ${{ inputs.conservative_update == 'true' && '--conservative' || '' }} ${{ inputs.update_target }} for ${{ inputs.another_gemfile }}"
      shell: bash
    - name: Regenerate `.rubocop_todo.yml` to enforce the suppression of the newly added Cop after the update.
      continue-on-error: true
      run: |
        bundle exec rubocop --auto-gen-config ${{ inputs.rubocop_options }}
        git add -u
        git commit -m "rubocop --auto-gen-config ${{ inputs.rubocop_options }}"
      shell: bash
    - name: Push changes
      run: git push --set-upstream origin update-${{ inputs.update_target }}-${{ github.run_number }}
      shell: bash
    - name: gh pr create
      run: |
        version=`bundle info ${{ inputs.update_target }} | grep -m 1 -o "[0-9]*\.[0-9]*\.[0-9]*"`
        info=`bundle info ${{ inputs.update_target }}`
        body=$(cat << EOS
        ## Summary
        Updated ${{ inputs.update_target }} version to ${version}
        ## Updated version information
        ${info}
        ### Note
        This pull request was generated by [rubocop-updater](https://github.com/ydah/rubocop-updater).
        EOS
        )
        gh pr create --title "Update ${{ inputs.update_target }} version to ${version}" --body "${body}" --label="${{ inputs.label }}"
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token || github.token }}
branding:
  color: red
  icon: git-pull-request
